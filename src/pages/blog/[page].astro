---
// src/pages/blog/[page].astro
// REVISI FINAL LENGKAP

import { client, urlFor } from '../../lib/sanity';
import { blogSetting } from '../../data/config';
import PaginatedBlogLayout from '../../components/blog/PaginatedBlogLayout.astro';
export const prerender = true;

export async function getStaticPaths() {
    const totalPosts = await client.fetch(`count(*[_type == "post"])`);
    const postsPerPage = blogSetting.postsPerPage || 10;
    const totalPages = Math.ceil(totalPosts / postsPerPage);

    let paths = [];
    for (let i = 2; i <= totalPages; i++) {
        paths.push({ params: { page: String(i) } });
    }
    return paths;
}

const { page } = Astro.params;
const currentPage = parseInt(page!);

const postsPerPage = blogSetting.postsPerPage;
const start = (currentPage - 1) * postsPerPage;
const limit = postsPerPage;

const paginatedPosts = await client.fetch(`
*[_type == "post"] | order(publishedAt desc) [$start...$start + $limit] {
    title,
    "slug": slug.current,
    excerpt,
    "publishDate": publishedAt,
    "featuredImage": mainImage { asset->{...}, alt },
    categories[]->{ title }
}`, { start, limit });

const totalPosts = await client.fetch(`count(*[_type == "post"])`);
const totalPages = Math.ceil(totalPosts / postsPerPage);

// PERBAIKAN: Ubah struktur data agar cocok dengan yang dibutuhkan komponen `BlogPost.astro`
const postsForLayout = paginatedPosts.map(post => ({
    slug: post.slug, // Kirim slug secara langsung
    data: {
        title: post.title,
        excerpt: post.excerpt,
        publishDate: new Date(post.publishDate),
        categories: post.categories?.map(c => c.title) || [],
        featuredImage: post.featuredImage ? urlFor(post.featuredImage).width(800).url() : undefined,
    }
}));
---

<PaginatedBlogLayout
    posts={postsForLayout}
    currentPage={currentPage}
    totalPages={totalPages}
    baseUrl="/blog"
    title="Blog"
    subtitle="Latest articles and news from the team"
/>
